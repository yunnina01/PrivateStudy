#include <stdio.h>
#include <stdlib.h>

typedef struct ListNode{
    int data;
    struct ListNode* link;
}ListNode;

void init(ListNode **head){
    *head = NULL;
}

void add_last(ListNode** head, int item){
    ListNode* new_node = (ListNode*)malloc(sizeof(ListNode*));
    if(new_node == NULL){
        printf("Memory Allocation Error\n");
        return;
    }
    new_node->data = item;
    new_node->link = new_node;
    ListNode* temp = *head;
    if(temp == NULL)
        *head = new_node;
    else{
        ListNode* temp = *head;
        while(temp->link != *head){
            temp = temp->link;
        }
        new_node->link = *head;
        temp->link = new_node;
    }
}

void delete_last(ListNode** head){
    ListNode* temp = *head;
    if(temp == NULL){
        printf("List is empty\n");
        return;
    }
    ListNode* removed = temp->link;
    if(removed == *head)
        init(head);
    else{
        while(removed->link != *head){
            removed = removed->link;
            temp = temp->link;
        }
        temp->link = removed->link;
    }
    free(removed);
}

void clear(ListNode** head){
    if(*head == NULL)
        printf("List is empty\n");
    else
        init(head);
}


int get_length(ListNode* head){
    int cnt = 0;
    ListNode* temp = head;
    if(temp != NULL){
        while(temp->link != head){
            temp = temp->link;
            cnt++;
        }
        cnt++;
    }
    return cnt;
}

void replace(ListNode* head, int pos, int item){
    int length = get_length(head);
    ListNode* temp = head;
    if(length == 0)
        printf("List is empty\n");
    else if(pos <= 0)
        printf("Position Input Error\n");
    else if(pos > length)
        printf("This position is empty\n");
    else{
        for(int i=0; i<pos-1; i++){
            temp = temp->link;
        }
        temp->data = item;
    }
}

void search(ListNode* head, int item){
    int length = get_length(head);
    ListNode* temp = head;
    if(temp == NULL){
        printf("List is empty\n");
        return;
    }
    for(int i=1; i<=length; i++){
        if(temp->data == item){
            printf("%d's position is %d\n", item, i);
            return;
        }
        temp = temp->link;
    }
    printf("No data about %d\n", item);
}

void display(ListNode* head){
    int length = get_length(head);
    ListNode* temp = head;
    if(temp == NULL){
        printf("List is empty\n");
        return;
    }
    for(int i=1; i<=length; i++){
        printf("[%d] : %d\n", i, temp->data);
        temp = temp->link;
    }
}

int main(){
    ListNode* list;
    int menu, item, pos, length;
    init(&list);
    
    while(menu != 99){
        printf("1. Add 2. Delete 3. Clear 4. Replace 5. Search 6. Length 7. Display 99. Exit\n");
        printf(">> ");
        scanf("%d", &menu);
        
        switch(menu){
            case 1:
                printf("Enter the number : ");
                scanf("%d", &item);
                add_last(&list, item);
                break;
            case 2:
                delete_last(&list);
                break;
            case 3:
                clear(&list);
                break;
            case 4:
                printf("Enter the position : ");
                scanf("%d", &pos);
                printf("Enter the number : ");
                scanf("%d", &item);
                replace(list, pos, item);
                break;
            case 5:
                printf("Enter the number : ");
                scanf("%d", &item);
                search(list, item);
                break;
            case 6:
                length = get_length(list);
                printf("List's length is %d\n", length);
                break;
            case 7:
                display(list);
                break;
            case 99:
                break;
            default:
                printf("Menu Selection Error\n");
        }
    }
    
    return 0;
}
